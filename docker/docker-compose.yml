version: '3.7'

volumes:
  prometheus_data: { }
  grafana_data: { }

networks:
  front-tier:
  back-tier:

services:

  app:
    ports:
      - "8888:8080"
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: ${IMAGE:-spirent/app}
    environment:
      - SERVER_PORT=8080
      - TIMESCALE_DB_URL=jdbc:postgresql://timescaledb:5432/db
      - USER=user
      - PASSWORD=user
      - MAX_POOL_SIZE=10

  timescaledb:
    image: 'artifactory.vwx.spirent.com/dockerhub/timescale/timescaledb:2.5.0-pg12'
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_PASSWORD=user
      - POSTGRES_USER=user
      - POSTGRES_DB=db
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init.sh

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ~/documents/env/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
     - 9090:9090

  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100

  grafana:
    image: grafana/grafana:latest
    volumes:
#      - ~/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ~/documents/env/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    ports:
      - 3000:3000
    links:
      - prometheus